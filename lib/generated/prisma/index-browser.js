
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stripeCustomerId: 'stripeCustomerId',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  deletedAt: 'deletedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  impersonatedBy: 'impersonatedBy'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  desc: 'desc',
  color: 'color',
  iconName: 'iconName',
  iconLib: 'iconLib',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  desc: 'desc',
  color: 'color',
  iconName: 'iconName',
  iconLib: 'iconLib',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  domainId: 'domainId',
  deletedAt: 'deletedAt'
};

exports.Prisma.LearningPathScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  smallDescription: 'smallDescription',
  fileKey: 'fileKey',
  price: 'price',
  currency: 'currency',
  duration: 'duration',
  slug: 'slug',
  status: 'status',
  level: 'level',
  stripePriceId: 'stripePriceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  deletedAt: 'deletedAt'
};

exports.Prisma.LearningPathItemScalarFieldEnum = {
  id: 'id',
  type: 'type',
  position: 'position',
  learningPathId: 'learningPathId',
  courseId: 'courseId',
  workshopId: 'workshopId',
  resourceId: 'resourceId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  smallDescription: 'smallDescription',
  description: 'description',
  fileKey: 'fileKey',
  price: 'price',
  currency: 'currency',
  duration: 'duration',
  status: 'status',
  level: 'level',
  stripePriceId: 'stripePriceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  categoryId: 'categoryId',
  deletedAt: 'deletedAt'
};

exports.Prisma.ChapterScalarFieldEnum = {
  id: 'id',
  title: 'title',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  courseId: 'courseId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnailKey: 'thumbnailKey',
  videoKey: 'videoKey',
  position: 'position',
  duration: 'duration',
  public: 'public',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  chapterId: 'chapterId'
};

exports.Prisma.WorkshopScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  slug: 'slug',
  statement: 'statement',
  fileKey: 'fileKey',
  statementsStartFileKey: 'statementsStartFileKey',
  statementsStartFileUrl: 'statementsStartFileUrl',
  statementVideoKey: 'statementVideoKey',
  price: 'price',
  currency: 'currency',
  duration: 'duration',
  status: 'status',
  level: 'level',
  stripePriceId: 'stripePriceId',
  solution: 'solution',
  solutionFileKey: 'solutionFileKey',
  solutionFileUrl: 'solutionFileUrl',
  solutionVideoKey: 'solutionVideoKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  deletedAt: 'deletedAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fileKey: 'fileKey',
  url: 'url',
  type: 'type',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.LearningPathResourceScalarFieldEnum = {
  learningPathId: 'learningPathId',
  resourceId: 'resourceId'
};

exports.Prisma.CourseResourceScalarFieldEnum = {
  courseId: 'courseId',
  resourceId: 'resourceId'
};

exports.Prisma.LessonResourceScalarFieldEnum = {
  lessonId: 'lessonId',
  resourceId: 'resourceId'
};

exports.Prisma.WorkshopResourceScalarFieldEnum = {
  workshopId: 'workshopId',
  resourceId: 'resourceId'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  completed: 'completed',
  startTime: 'startTime',
  endTime: 'endTime',
  watchedSeconds: 'watchedSeconds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  lessonId: 'lessonId'
};

exports.Prisma.UserProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  itemId: 'itemId',
  completed: 'completed',
  updatedAt: 'updatedAt',
  progressPercentage: 'progressPercentage',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseTagScalarFieldEnum = {
  courseId: 'courseId',
  tagId: 'tagId'
};

exports.Prisma.WorkshopTagScalarFieldEnum = {
  workshopId: 'workshopId',
  tagId: 'tagId'
};

exports.Prisma.LearningPathTagScalarFieldEnum = {
  learningPathId: 'learningPathId',
  tagId: 'tagId'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  discount: 'discount',
  type: 'type',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  active: 'active',
  itemType: 'itemType',
  courseId: 'courseId',
  workshopId: 'workshopId',
  learningPathId: 'learningPathId'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discount: 'discount',
  type: 'type',
  usageLimit: 'usageLimit',
  usedCount: 'usedCount',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  active: 'active'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  interval: 'interval',
  price: 'price',
  stripePriceId: 'stripePriceId',
  active: 'active',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  selected: 'selected',
  options: 'options'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  stripeSubId: 'stripeSubId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  courseId: 'courseId',
  learningPathId: 'learningPathId',
  workshopId: 'workshopId',
  userId: 'userId',
  paymentId: 'paymentId',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  stripeId: 'stripeId',
  userId: 'userId',
  courseId: 'courseId',
  learningPathId: 'learningPathId',
  workshopId: 'workshopId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  receiptUrl: 'receiptUrl',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  number: 'number',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  pdfUrl: 'pdfUrl',
  date: 'date',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  title: 'title',
  type: 'type',
  referenceId: 'referenceId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  total: 'total'
};

exports.Prisma.ObjectiveScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.PrerequisiteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.CourseObjectiveScalarFieldEnum = {
  courseId: 'courseId',
  objectiveId: 'objectiveId'
};

exports.Prisma.CoursePrerequisiteScalarFieldEnum = {
  courseId: 'courseId',
  prerequisiteId: 'prerequisiteId'
};

exports.Prisma.WorkshopObjectiveScalarFieldEnum = {
  workshopId: 'workshopId',
  objectiveId: 'objectiveId'
};

exports.Prisma.WorkshopPrerequisiteScalarFieldEnum = {
  workshopId: 'workshopId',
  prerequisiteId: 'prerequisiteId'
};

exports.Prisma.LearningPathObjectiveScalarFieldEnum = {
  learningPathId: 'learningPathId',
  objectiveId: 'objectiveId'
};

exports.Prisma.LearningPathPrerequisiteScalarFieldEnum = {
  learningPathId: 'learningPathId',
  prerequisiteId: 'prerequisiteId'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  title: 'title',
  desc: 'desc',
  color: 'color',
  iconName: 'iconName',
  iconLib: 'iconLib',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  postalCode: 'postalCode',
  city: 'city',
  country: 'country',
  email: 'email',
  phone: 'phone',
  siret: 'siret',
  vatNumber: 'vatNumber',
  logoUrl: 'logoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialLinkScalarFieldEnum = {
  id: 'id',
  name: 'name',
  iconLib: 'iconLib',
  iconName: 'iconName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanySocialLinkScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  socialLinkId: 'socialLinkId',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  type: 'type',
  chapterId: 'chapterId',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  type: 'type',
  quizId: 'quizId'
};

exports.Prisma.QuizOptionScalarFieldEnum = {
  id: 'id',
  content: 'content',
  isCorrect: 'isCorrect',
  questionId: 'questionId'
};

exports.Prisma.QuizResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId',
  score: 'score',
  passed: 'passed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rating: 'rating',
  text: 'text',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsletterSubscriptionScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  confirmed: 'confirmed'
};

exports.Prisma.ContactMessageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  subject: 'subject',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ContactReplyScalarFieldEnum = {
  id: 'id',
  contactMessageId: 'contactMessageId',
  adminId: 'adminId',
  response: 'response',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.enrollmentStatus = exports.$Enums.enrollmentStatus = {
  Pending: 'Pending',
  Active: 'Active',
  Cancelled: 'Cancelled'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Domain: 'Domain',
  Category: 'Category',
  LearningPath: 'LearningPath',
  LearningPathItem: 'LearningPathItem',
  Course: 'Course',
  Chapter: 'Chapter',
  Lesson: 'Lesson',
  Workshop: 'Workshop',
  Resource: 'Resource',
  LearningPathResource: 'LearningPathResource',
  CourseResource: 'CourseResource',
  LessonResource: 'LessonResource',
  WorkshopResource: 'WorkshopResource',
  LessonProgress: 'LessonProgress',
  UserProgress: 'UserProgress',
  Tag: 'Tag',
  CourseTag: 'CourseTag',
  WorkshopTag: 'WorkshopTag',
  LearningPathTag: 'LearningPathTag',
  Promotion: 'Promotion',
  PromoCode: 'PromoCode',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  Enrollment: 'Enrollment',
  Payment: 'Payment',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Objective: 'Objective',
  Prerequisite: 'Prerequisite',
  CourseObjective: 'CourseObjective',
  CoursePrerequisite: 'CoursePrerequisite',
  WorkshopObjective: 'WorkshopObjective',
  WorkshopPrerequisite: 'WorkshopPrerequisite',
  LearningPathObjective: 'LearningPathObjective',
  LearningPathPrerequisite: 'LearningPathPrerequisite',
  Feature: 'Feature',
  Company: 'Company',
  SocialLink: 'SocialLink',
  CompanySocialLink: 'CompanySocialLink',
  Page: 'Page',
  Quiz: 'Quiz',
  QuizQuestion: 'QuizQuestion',
  QuizOption: 'QuizOption',
  QuizResult: 'QuizResult',
  Testimonial: 'Testimonial',
  NewsletterSubscription: 'NewsletterSubscription',
  ContactMessage: 'ContactMessage',
  ContactReply: 'ContactReply'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
