generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]
  enrollment    Enrollment[]

  lessonProgress LessonProgress[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String      @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel @default(Beginner)
  smallDescription String
  slug             String      @unique

  stripePriceId String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  chapters Chapter[]

  enrollment Enrollment[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  tags Tag[] @relation("CourseTags")
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
  Expert
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons Lesson[]
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int

  duration Int     @default(0)
  public   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status enrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, courseId])
}

enum enrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id        String  @id @default(uuid())
  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
}

model Category {
  id String @id @default(uuid())

  title    String
  slug     String  @unique
  desc     String
  color    String?
  iconName String?
  iconLib  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
}

model Tag {
  id String @id @default(uuid())

  title String
  slug  String  @unique
  color String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[] @relation("CourseTags")
}

model Feature {
  id        String   @id @default(cuid())
  title     String   @unique
  desc      String
  color     String
  iconLib   String
  iconName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
