generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]
  enrollment    Enrollment[]

  lessonProgress LessonProgress[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  Payment Payment[]

  Invoice Invoice[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String      @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel @default(Beginner)
  smallDescription String
  slug             String      @unique

  stripePriceId String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  chapters Chapter[]

  enrollment Enrollment[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  tags    Tag[]     @relation("CourseTags")
  Payment Payment[]

  coursePromotion CoursePromotion[]

  promoCodes PromoCode[] @relation("CoursePromoCodes")
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
  Expert
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons Lesson[]
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int

  duration Int     @default(0)
  public   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status enrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  payment   Payment? @relation("EnrollmentToPayment", fields: [paymentId], references: [id])
  paymentId String?  @unique

  @@unique([userId, courseId])
}

model Payment {
  id       String @id @default(uuid())
  stripeId String @unique // ID de la session ou du paiement Stripe
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  amount     Int
  currency   String
  status     String // 'succeeded', 'pending', 'failed', etc.
  method     String? // card, stripe, etc.
  receiptUrl String? // lien Stripe vers le reçu

  createdAt DateTime @default(now())

  enrollment Enrollment? @relation("EnrollmentToPayment")
}

enum enrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id        String  @id @default(uuid())
  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
}

model Category {
  id       String  @id @default(uuid())
  title    String
  slug     String  @unique
  desc     String
  color    String?
  iconName String?
  iconLib  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[]
}

model Tag {
  id String @id @default(uuid())

  title String
  slug  String  @unique
  color String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses Course[] @relation("CourseTags")
}

model CoursePromotion {
  id          String   @id @default(uuid())
  title       String
  description String?
  discount    Int // Valeur de la réduction
  type        String   @default("PERCENTAGE") // FIXED
  startsAt    DateTime
  endsAt      DateTime
  active      Boolean  @default(true)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model PromoCode {
  id          String   @id @default(uuid())
  code        String   @unique // Exemple : WELCOME10
  description String?
  discount    Int // 10 pour -10%
  type        String   @default("PERCENTAGE") // FIXED
  usageLimit  Int? // Nombre max d’utilisations
  usedCount   Int      @default(0)
  startsAt    DateTime
  endsAt      DateTime
  active      Boolean  @default(true)

  // Relations
  applicableCourses Course[] @relation("CoursePromoCodes")
}

model Invoice {
  id        String        @id @default(uuid())
  number    String
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  items     InvoiceItem[]
  amount    Int // total TTC en centimes
  currency  String        @default("EUR")
  pdfUrl    String?
  date      DateTime      @default(now())
  createdAt DateTime      @default(now())
}

model InvoiceItem {
  id        String  @id @default(uuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String

  // Champs communs
  title       String
  type        InvoiceItemType
  referenceId String // ID du cours, workshop, abonnement, etc.

  quantity  Int @default(1)
  unitPrice Int // centimes
  total     Int // unitPrice * quantity
}

enum InvoiceItemType {
  COURSE
  WORKSHOP
  SUBSCRIPTION
}

model Feature {
  id        String   @id @default(cuid())
  title     String   @unique
  desc      String
  color     String?
  iconName  String?
  iconLib   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id         String   @id @default(uuid())
  name       String
  address    String
  postalCode String
  city       String
  country    String
  email      String
  phone      String?
  siret      String?
  vatNumber  String?
  logoUrl    String?
  createdAt  DateTime @default(now())
}

model SocialLink {
  id        String   @id @default(cuid())
  name      String
  url       String
  iconLib   String // ex: "lucide", "si", "fa", "tabler"
  iconName  String // ex: "facebook", "github", "x"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
